const path = require('node:path');
const kolibriPackageJson = require('../../kolibri/package.json');
const writeSourceToFile = require('./i18n/writeSourceToFile');

const apiSpec = kolibriPackageJson.exports || {};

const { kolibriName } = require('./kolibriName');

// Generate a list of all the module imports that we need to expose
// Iterate over all the exports in the kolibri package
const apiKeys = Object.keys(apiSpec)
  // Filter out the export for the root package '.' as we don't need to expose that
  .filter(key => key !== '.')
  // Add the kolibri prefix and remove the leading '.' to make a full import path
  // e.g. './urls' -> 'kolibri/urls'
  .map(key => 'kolibri' + key.slice(1))
  // Add the list of modules that are exposed in the kolibri package.json
  // Unmodified, as they are already full import paths, e.g. 'vue'
  .concat(kolibriPackageJson.exposes);

const coreExternals = {
  // The kolibri package itself is a special case, as it is the root of the package
  // and is not required to be imported in the core bundle, as it is the core bundle.
  kolibri: kolibriName,
};

for (const key of apiKeys) {
  coreExternals[key] = [kolibriName, key];
}

const apiSpecHeader = `
/*
 * This file defines the API for the core Kolibri app.
 * This file is automatically generated using the kolibri package.json
 * exports and exposes fields by the kolibri-tools package.
 */

`;

function rebuildApiSpec() {
  const apiSpecFilePath = path.resolve(__dirname, '../../kolibri/apiSpec.js');
  let apiSpecContent = apiSpecHeader;
  apiSpecContent += 'export default {\n';
  for (const key of apiKeys) {
    apiSpecContent += `  '${key}': require('${key}'),\n`;
  }
  apiSpecContent += '};\n';
  writeSourceToFile(apiSpecFilePath, apiSpecContent);
}

module.exports = {
  coreExternals,
  rebuildApiSpec,
};
